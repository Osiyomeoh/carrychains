/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DeliveryVerification {
  export type VerificationStruct = {
    deliveryId: BigNumberish;
    pickupProofCID: string;
    pickupTimestamp: BigNumberish;
    deliveryProofCID: string;
    deliveryTimestamp: BigNumberish;
    isVerified: boolean;
  };

  export type VerificationStructOutput = [
    deliveryId: bigint,
    pickupProofCID: string,
    pickupTimestamp: bigint,
    deliveryProofCID: string,
    deliveryTimestamp: bigint,
    isVerified: boolean
  ] & {
    deliveryId: bigint;
    pickupProofCID: string;
    pickupTimestamp: bigint;
    deliveryProofCID: string;
    deliveryTimestamp: bigint;
    isVerified: boolean;
  };
}

export interface DeliveryVerificationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getVerification"
      | "isDeliveryVerified"
      | "marketplaceContract"
      | "owner"
      | "recordDelivery"
      | "recordPickup"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateMarketplaceContract"
      | "verifications"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DeliveryVerified"
      | "MarketplaceUpdated"
      | "OwnershipTransferred"
      | "PickupVerified"
      | "VerificationCompleted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getVerification",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDeliveryVerified",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaceContract",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordDelivery",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "recordPickup",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMarketplaceContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifications",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDeliveryVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordDelivery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordPickup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMarketplaceContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifications",
    data: BytesLike
  ): Result;
}

export namespace DeliveryVerifiedEvent {
  export type InputTuple = [deliveryId: BigNumberish, proofCID: string];
  export type OutputTuple = [deliveryId: bigint, proofCID: string];
  export interface OutputObject {
    deliveryId: bigint;
    proofCID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MarketplaceUpdatedEvent {
  export type InputTuple = [newMarketplace: AddressLike];
  export type OutputTuple = [newMarketplace: string];
  export interface OutputObject {
    newMarketplace: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PickupVerifiedEvent {
  export type InputTuple = [deliveryId: BigNumberish, proofCID: string];
  export type OutputTuple = [deliveryId: bigint, proofCID: string];
  export interface OutputObject {
    deliveryId: bigint;
    proofCID: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerificationCompletedEvent {
  export type InputTuple = [deliveryId: BigNumberish];
  export type OutputTuple = [deliveryId: bigint];
  export interface OutputObject {
    deliveryId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DeliveryVerification extends BaseContract {
  connect(runner?: ContractRunner | null): DeliveryVerification;
  waitForDeployment(): Promise<this>;

  interface: DeliveryVerificationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getVerification: TypedContractMethod<
    [deliveryId: BigNumberish],
    [DeliveryVerification.VerificationStructOutput],
    "view"
  >;

  isDeliveryVerified: TypedContractMethod<
    [deliveryId: BigNumberish],
    [boolean],
    "view"
  >;

  marketplaceContract: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  recordDelivery: TypedContractMethod<
    [deliveryId: BigNumberish, proofCID: string],
    [void],
    "nonpayable"
  >;

  recordPickup: TypedContractMethod<
    [deliveryId: BigNumberish, proofCID: string],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMarketplaceContract: TypedContractMethod<
    [_marketplaceContract: AddressLike],
    [void],
    "nonpayable"
  >;

  verifications: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, bigint, boolean] & {
        deliveryId: bigint;
        pickupProofCID: string;
        pickupTimestamp: bigint;
        deliveryProofCID: string;
        deliveryTimestamp: bigint;
        isVerified: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getVerification"
  ): TypedContractMethod<
    [deliveryId: BigNumberish],
    [DeliveryVerification.VerificationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDeliveryVerified"
  ): TypedContractMethod<[deliveryId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "marketplaceContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "recordDelivery"
  ): TypedContractMethod<
    [deliveryId: BigNumberish, proofCID: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "recordPickup"
  ): TypedContractMethod<
    [deliveryId: BigNumberish, proofCID: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMarketplaceContract"
  ): TypedContractMethod<
    [_marketplaceContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifications"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint, string, bigint, boolean] & {
        deliveryId: bigint;
        pickupProofCID: string;
        pickupTimestamp: bigint;
        deliveryProofCID: string;
        deliveryTimestamp: bigint;
        isVerified: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "DeliveryVerified"
  ): TypedContractEvent<
    DeliveryVerifiedEvent.InputTuple,
    DeliveryVerifiedEvent.OutputTuple,
    DeliveryVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "MarketplaceUpdated"
  ): TypedContractEvent<
    MarketplaceUpdatedEvent.InputTuple,
    MarketplaceUpdatedEvent.OutputTuple,
    MarketplaceUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PickupVerified"
  ): TypedContractEvent<
    PickupVerifiedEvent.InputTuple,
    PickupVerifiedEvent.OutputTuple,
    PickupVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "VerificationCompleted"
  ): TypedContractEvent<
    VerificationCompletedEvent.InputTuple,
    VerificationCompletedEvent.OutputTuple,
    VerificationCompletedEvent.OutputObject
  >;

  filters: {
    "DeliveryVerified(uint256,string)": TypedContractEvent<
      DeliveryVerifiedEvent.InputTuple,
      DeliveryVerifiedEvent.OutputTuple,
      DeliveryVerifiedEvent.OutputObject
    >;
    DeliveryVerified: TypedContractEvent<
      DeliveryVerifiedEvent.InputTuple,
      DeliveryVerifiedEvent.OutputTuple,
      DeliveryVerifiedEvent.OutputObject
    >;

    "MarketplaceUpdated(address)": TypedContractEvent<
      MarketplaceUpdatedEvent.InputTuple,
      MarketplaceUpdatedEvent.OutputTuple,
      MarketplaceUpdatedEvent.OutputObject
    >;
    MarketplaceUpdated: TypedContractEvent<
      MarketplaceUpdatedEvent.InputTuple,
      MarketplaceUpdatedEvent.OutputTuple,
      MarketplaceUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PickupVerified(uint256,string)": TypedContractEvent<
      PickupVerifiedEvent.InputTuple,
      PickupVerifiedEvent.OutputTuple,
      PickupVerifiedEvent.OutputObject
    >;
    PickupVerified: TypedContractEvent<
      PickupVerifiedEvent.InputTuple,
      PickupVerifiedEvent.OutputTuple,
      PickupVerifiedEvent.OutputObject
    >;

    "VerificationCompleted(uint256)": TypedContractEvent<
      VerificationCompletedEvent.InputTuple,
      VerificationCompletedEvent.OutputTuple,
      VerificationCompletedEvent.OutputObject
    >;
    VerificationCompleted: TypedContractEvent<
      VerificationCompletedEvent.InputTuple,
      VerificationCompletedEvent.OutputTuple,
      VerificationCompletedEvent.OutputObject
    >;
  };
}
